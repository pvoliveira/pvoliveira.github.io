<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Paulo Oliveira</title><link>https://blog.pauloliveira.dev/</link><description>Paulo Oliveira</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Thu, 20 May 2021 00:59:51 +0100</lastBuildDate><atom:link href="https://blog.pauloliveira.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Async/Await - Pequenas dicas ;)</title><link>https://blog.pauloliveira.dev/post/2021-05-17-async-await-dicas-que-aprendi/</link><pubDate>Thu, 20 May 2021 00:59:51 +0100</pubDate><guid>https://blog.pauloliveira.dev/post/2021-05-17-async-await-dicas-que-aprendi/</guid><description>&lt;p>Olá novamente, sei que passou muito tempo até chegarmos nesse novo post, tive contra-tempos, falta de vontade de continuar, e comecei a fazer algo que não fazia que era guardar em algum lugar o que aprendi para partilhar aqui. Enfim, vamos a isso 🤓&lt;/p>
&lt;p>Estive a fazer um curso sobre código assíncrono em .NET/C# &lt;a href="https://asyncexpert.com">Async Experts&lt;/a>, e acho que tem conteúdo suficiente para render alguns posts, então comecei a fazer uma lista para partilhar aqui, agora vou deixar uma dica que você pode já saber ou talvez nunca tenha notado.&lt;/p>
&lt;h2 id="exceptions">Exceptions&lt;/h2>
&lt;p>Observe o exemplo abaixo por um minuto e tente identificar se existe algo &amp;ldquo;mal&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_A_Async(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(&lt;span style="color:#66d9ef">value&lt;/span>))
{
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException();
}
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> httpClient.GetAsync(&lt;span style="color:#66d9ef">value&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response != &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task A_MethodA_Async()
{
&lt;span style="color:#66d9ef">var&lt;/span> x = &lt;span style="color:#66d9ef">await&lt;/span> Method_A_Async(&lt;span style="color:#e6db74">&amp;#34;x&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task B_MethodA_Async()
{
&lt;span style="color:#66d9ef">var&lt;/span> x = &lt;span style="color:#66d9ef">await&lt;/span> Method_A_Async(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O código não tem nenhum problema, o método &lt;code>A_MethodA_Async&lt;/code> irá ser executado sem gerar exceções, enquanto o método &lt;code>B_MethodA_Async&lt;/code> lançará uma exceção do tipo &lt;code>ArgumentException&lt;/code>. Você pode já ter escrito métodos dessa forma e vão funcionar, mas se pensarmos em como métodos assíncronos são executados estamos a utilizar um pouco mal os recursos quando o método &lt;code>B_MethodA_Async&lt;/code> é executado.&lt;/p>
&lt;p>Quando fazemos &lt;code>await&lt;/code> para computar o valor de uma &lt;code>Task&lt;/code> estamos a escalar a execução da &lt;code>Task&lt;/code> para o &lt;code>ThreadPool&lt;/code>, pois bem, no exemplo acima existem dois caminhos para nosso código executar: primeiro quando passar um valor que é vazio ou nulo, o segundo é quando passamos um valor válido e temos uma nova chama assíncrona. Isso significa que podemos (ou não) estar a utilizar mais de uma thread para processar código que poderia ser síncrono, vamos reescrever o código do método &lt;code>Method_A_Async&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_B_Async(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(&lt;span style="color:#66d9ef">value&lt;/span>))
{
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException();
}
&lt;span style="color:#66d9ef">return&lt;/span> Method_B_InternalAsync(&lt;span style="color:#66d9ef">value&lt;/span>);
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_B_InternalAsync(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> httpClient.GetAsync(&lt;span style="color:#66d9ef">value&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response != &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Primeiro notem que removi o &lt;code>async&lt;/code> da assinatura do método, não estamos mais a utilizar o &lt;code>await&lt;/code> para nenhuma chamada, então isso torna &lt;code>Method_B_Async&lt;/code> um método síncrono. Também criei um novo método &lt;code>Method_B_InternalAsync&lt;/code> (usando &lt;code>async&lt;/code> na assinatura) que não tem mais as validações necessárias para os parâmetros (feitas no método &lt;code>Method_B_Async&lt;/code>), isso é chamado de &amp;ldquo;async eliding&amp;rdquo; e a tradução pode ficar um pouco estranha mas é algo como &lt;em>&amp;ldquo;suprimir/omitir o assíncrono&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>Abaixo podemos ver melhor o que significa adicionar o &lt;code>async&lt;/code> na assinatura do método:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#a6e22e">[AsyncStateMachine(typeof(&amp;lt;Method_A_Async&amp;gt;d__1))]&lt;/span>
&lt;span style="color:#a6e22e">[DebuggerStepThrough]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_A_Async(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&amp;lt;Method_A_Async&amp;gt;d__1 stateMachine = &lt;span style="color:#66d9ef">new&lt;/span> &amp;lt;Method_A_Async&amp;gt;d__1();
stateMachine.&amp;lt;&amp;gt;t__builder = AsyncTaskMethodBuilder&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt;.Create();
stateMachine.&amp;lt;&amp;gt;&lt;span style="color:#ae81ff">4&lt;/span>__this = &lt;span style="color:#66d9ef">this&lt;/span>;
stateMachine.&lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#66d9ef">value&lt;/span>;
stateMachine.&amp;lt;&amp;gt;&lt;span style="color:#ae81ff">1&lt;/span>__state = -&lt;span style="color:#ae81ff">1&lt;/span>;
stateMachine.&amp;lt;&amp;gt;t__builder.Start(&lt;span style="color:#66d9ef">ref&lt;/span> stateMachine);
&lt;span style="color:#66d9ef">return&lt;/span> stateMachine.&amp;lt;&amp;gt;t__builder.Task;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E sem &lt;code>async&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_B_Async(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(&lt;span style="color:#66d9ef">value&lt;/span>))
{
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException();
}
&lt;span style="color:#66d9ef">return&lt;/span> Method_B_InternalAsync(&lt;span style="color:#66d9ef">value&lt;/span>);
}
&lt;span style="color:#a6e22e">
&lt;/span>&lt;span style="color:#a6e22e">[AsyncStateMachine(typeof(&amp;lt;Method_B_InternalAsync&amp;gt;d__2))]&lt;/span>
&lt;span style="color:#a6e22e">[DebuggerStepThrough]&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Method_B_InternalAsync(&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
&amp;lt;Method_B_InternalAsync&amp;gt;d__2 stateMachine = &lt;span style="color:#66d9ef">new&lt;/span> &amp;lt;Method_B_InternalAsync&amp;gt;d__2();
stateMachine.&amp;lt;&amp;gt;t__builder = AsyncTaskMethodBuilder&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt;.Create();
stateMachine.&amp;lt;&amp;gt;&lt;span style="color:#ae81ff">4&lt;/span>__this = &lt;span style="color:#66d9ef">this&lt;/span>;
stateMachine.&lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#66d9ef">value&lt;/span>;
stateMachine.&amp;lt;&amp;gt;&lt;span style="color:#ae81ff">1&lt;/span>__state = -&lt;span style="color:#ae81ff">1&lt;/span>;
stateMachine.&amp;lt;&amp;gt;t__builder.Start(&lt;span style="color:#66d9ef">ref&lt;/span> stateMachine);
&lt;span style="color:#66d9ef">return&lt;/span> stateMachine.&amp;lt;&amp;gt;t__builder.Task;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Um máquina de estados é criada para a execução do método assíncrono e a validação dos parâmetros será feito dentro dessa máquina de estados. Enquanto se utilizarmos a outra abordagem, conseguimos manter as validações que não dependem de métodos assíncronos fora do fluxo assíncrono de execução.&lt;/p>
&lt;p>Pode parecer um detalhe mas evitar a máquina de estados (no nosso exemplo quando vamos parar a execução do método por causa de uma validação/exceção) além de poder melhorar o uso de mais threads na execução também evita a alocação de objetos para gerir o código assíncrono. São otimizações que em &lt;em>hot-paths&lt;/em> (trechos muito executados na aplicação) podem gerar ganhos positivos e performance 😉.&lt;/p></description></item><item><title>Cliente para Kafka (do zero) em .NET Core - parte 1</title><link>https://blog.pauloliveira.dev/post/2020-08-18-cliente-kafka-do-zero-net-core-parte-1/</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><guid>https://blog.pauloliveira.dev/post/2020-08-18-cliente-kafka-do-zero-net-core-parte-1/</guid><description>&lt;p>Segundo a &lt;a href="https://pt.wikipedia.org/wiki/Protocolo_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)">Wikipedia&lt;/a> protocolo é descrito como:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Na ciência da computação, um protocolo é uma convenção que controla e possibilita uma conexão, comunicação, transferência de dados entre dois sistemas computacionais.
De maneira simples, um protocolo pode ser definido como &amp;ldquo;as regras que governam&amp;rdquo; a sintaxe, semântica e sincronização da comunicação. Os protocolos podem ser implementados pelo hardware, software ou por uma combinação dos dois.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Faz alguns meses que tenho investido tempo em compreender melhor gerenciamento de memória e otimização com .NET Core, e depois de tanto tempo trabalhando com isso percebo que realmente deveria ter começado antes - antes tarde do nunca não é?! 🤷‍♂️.&lt;/p>
&lt;p>Nesse sentido estava a procura de um projeto em que pudesse desenvolver e testar essas capacidades do .NET, e a alguns meses conheci um projeto criado pelo &lt;a href="https://twitter.com/davidfowl">David Fowler&lt;/a> chamado &lt;a href="https://github.com/davidfowl/BedrockFramework">Bedrock Framework&lt;/a>, basicamente é um conjunto de APIs em .NET Core que pode ser usado para construção de protocolos de comunicação entre cliente e servidor, o projeto se basea em novas abstrações introduzidas no .NET Core 3 (&lt;a href="https://www.nuget.org/packages/Microsoft.AspNetCore.Connections.Abstractions">Microsoft.AspNetCore.Connections.Abstractions&lt;/a>). Então você pode criar seu próprio servidor que se comunica usando um protocolo customizado, utilizando a infraestrutura do &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-3.1">Kestrel&lt;/a> e &lt;a href="https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/">System.IO.Pipelines&lt;/a>.&lt;/p>
&lt;p>&lt;em>Neste post, falarei pouco sobre o funcionamento do &lt;a href="https://kafka.apache.org/">Kafka&lt;/a>, não explicarei termos básicos, o foco é o que se relaciona a comunicação e a implementação em .NET, por isso posso citar termos que não terei explicado, mas podem ser facilmente encontrados.&lt;/em>&lt;/p>
&lt;h2 id="kafka">Kafka&lt;/h2>
&lt;p>Como o título deve deixar claro, o meu objetivo é criar do zero uma implementação do protocolo de comunicação com o &lt;a href="https://kafka.apache.org/">Apache Kafka&lt;/a>, não tenho a ambição de cobrir todos os recursos, mas o mínimo para publicar e consumir mensagens.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Apache Kafka é uma plataforma distribuída de fluxo de eventos, é de código-aberto e usado por milhares de companhias para fluxos de alta performace de dados, fluxo de análises, integração de dados, e aplicações críticas. (&lt;a href="https://kafka.apache.org">https://kafka.apache.org&lt;/a>) [minha tradução livre]&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;a href="https://kafka.apache.org/protocol.html">documentação&lt;/a> é muito boa e traz nos detalhes como deve ser feita a comunicação. Na Farfetch trabalhamos com Kafka como principal plataforma para comunicação assíncrona entre as aplicações, recentemente foi lançado o &lt;a href="https://github.com/Farfetch/kafka-flow">primeiro projeto&lt;/a> open-source da empresa que é um framework para comunicação com Kafka 🙄.&lt;/p>
&lt;h3 id="comunicação">Comunicação&lt;/h3>
&lt;p>Kafka usa um protocolo binário sobre TCP, onde as mensagens de requisição e resposta são aos pares, para cada requisição há uma resposta. Todas mensagens são de tamanho delimitado e são construídas com tipos primitivos (char, integer, long e etc). Há também indicações para como as conexões com os &lt;em>brokers&lt;/em> (nós de um cluster) deve ser geridas, deve se manter uma conexão para cada &lt;em>broker&lt;/em>, os servidores vão garantir a sequência de execução das requisições em uma conexão. A conexão com os &lt;em>brokers&lt;/em> deve ser mantida por conta de como as mensagens são particionadas pelos &lt;em>brokers&lt;/em> e também para obter uma melhor performace.&lt;/p>
&lt;h3 id="particionamento-e-inicialização">Particionamento e Inicialização&lt;/h3>
&lt;p>Kafka, não mantém todos os dados em todos os nós do &lt;em>cluster&lt;/em>, o tópico é criado contando com um número de partições inicial, e então cada partição é replicada usando um dado fator de replicação. As mensagens devem ser publicadas para o &lt;em>broker&lt;/em> que é o lider para dada partição do tópico, e isso é possível descobrir enviando uma requisição para buscar os metadados do &lt;em>cluster&lt;/em>, você terá a informação de quais &lt;em>brokers&lt;/em> possuem quais tópicos e partições, assim pode se ter um cache do lado do cliente com esses metadados e atualizar o cache quando as requisições para publicar ou recuperar mensagens falharem com o código de erro &lt;em>&lt;strong>NotLeaderForPartition&lt;/strong>&lt;/em>.&lt;/p>
&lt;h3 id="protocolo">Protocolo&lt;/h3>
&lt;p>Como disse anteriormente as mensagens tem um tamanho delimitado, ou seja, devemos saber exatamente o tamanho da mensagem antes de começar enviar os bytes, isso porque é com base no tamanho da mensagem que o servidor pode delimitar as mensagens recebidas pelo cliente, o mesmo vale quando o cliente está a analisar os dados recebidos do servidor. Os campos obrigatórios para o envio ou leitura de uma mensagem Kafka são os seguintes:&lt;/p>
&lt;h4 id="tamanho-requisiçõesrespostas">Tamanho (requisições/respostas)&lt;/h4>
&lt;p>| Campo | Tipo | Tamanho (bytes) | Descrição |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| message_size | INT32 | 4 (big-endian) | O campo message_size fornece o tamanho da mensagem de solicitação ou resposta subsequente em bytes. |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p>
&lt;h4 id="cabeçalho-da-requisição">Cabeçalho da requisição&lt;/h4>
&lt;p>| Campo | Tipo | Tamanho (bytes) | Descrição |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| request_api_key | INT16 | 2 (big-endian) | Chave da API desta requisição. |
| request_api_version | INT16 | 2 (big-endian) | Versão da API desta requisição. |
| correlation_id | INT32 | 4 (big-endian) | Identificador de co-relação desta requisição (usado posteriormente para identificar as respostas geradas). |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p>
&lt;h4 id="cabeçalho-da-resposta">Cabeçalho da resposta&lt;/h4>
&lt;p>| Campo | Tipo | Tamanho (bytes) | Descrição |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| correlation_id | INT32 | 4 (big-endian) | Identificador de co-relação da requisição. |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p>
&lt;h2 id="projeto">Projeto&lt;/h2>
&lt;p>Ok, com essas informações acho que já podemos começar, e a primeira coisa a fazer é criar um projeto e definir &amp;ldquo;onde-vai-ficar-o-que&amp;rdquo; 😅. Tenho algumas dúvidas quanto ao design de uma biblioteca desse tipo e vou tentar esclarece-las nesse processo. Inicialmente penso em &lt;a href="https://github.com/pvoliveira/kafkaraw">KafkaRaw&lt;/a> como um bom nome e não encontrei nada igual no &lt;em>Nuget&lt;/em>, então será esse o nome do projeto. Também não desejo ter/manter compatilidade com versões mais antigas do .NET Core, tudo será baseado no 3.1.&lt;/p>
&lt;p>&lt;img src="https://blog.pauloliveira.dev/assets/images/kafkaraw-solution.jpg" alt="screenshot da solução inicial">&lt;/p>
&lt;p>Baseado na estrutura básica de uma requisição procurei uma chamada da API que fosse simples e pudesse comprovar o funcionamento do projeto, por fim decidi utilizar a chamada para retornar as versões compatíveis da API pelo servidor &lt;a href="https://kafka.apache.org/protocol#The_Messages_ApiVersions">ApiVersions (ApiKey = 18)&lt;/a>, basicamente só precisamos enviar no cabeçalho o &lt;em>ApiKey&lt;/em> da chamada e qual versão queremos usar, neste caso &lt;em>&lt;em>request_api_key&lt;/em>&lt;/em> = 18 e &lt;em>&lt;em>request_api_version&lt;/em>&lt;/em> = 0, o cabeçalho &lt;em>&lt;em>correlation_id&lt;/em>&lt;/em> neste caso não tem muita importância pois apenas uma chamada será feita, e a vamos analisar a resposta imediatamente após a requisição.&lt;/p>
&lt;p>Criei um método simples para se conectar com os &lt;em>brokers&lt;/em> indicados no construtor da classe e outro para realizar a chamada em si, vamos dar uma olhada neles:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">/// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task ConnectAsync()
{
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> host &lt;span style="color:#66d9ef">in&lt;/span> _initialBrokers)
{
_connections.TryAdd(host, &lt;span style="color:#66d9ef">await&lt;/span> makeConnection(host));
}
_logger.LogInformation(&lt;span style="color:#e6db74">&amp;#34;Starting Kafka client.&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;ConnectionContext&amp;gt; makeConnection(DnsEndPoint h)
{
&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> ClientBuilder(_serviceProvider)
.UseSockets()
.UseConnectionLogging()
.Build();
&lt;span style="color:#66d9ef">var&lt;/span> connection = &lt;span style="color:#66d9ef">await&lt;/span> client.ConnectAsync(h);
_logger.LogInformation(&lt;span style="color:#e6db74">$&amp;#34;Connected to {connection.LocalEndPoint}&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> connection;
};
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;ApiVersionsResponse&amp;gt; GetApiVersions()
{
&lt;span style="color:#66d9ef">var&lt;/span> request = &lt;span style="color:#66d9ef">new&lt;/span> ApiVersionsRequest(&lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span> , &lt;span style="color:#e6db74">&amp;#34;kafkaraw/0.1&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> conn = _connections.First();
&lt;span style="color:#66d9ef">var&lt;/span> protocol = &lt;span style="color:#66d9ef">new&lt;/span> Protocols.ApiVersions();
&lt;span style="color:#66d9ef">var&lt;/span> reader = conn.Value.CreateReader();
&lt;span style="color:#66d9ef">var&lt;/span> writer = conn.Value.CreateWriter();
&lt;span style="color:#66d9ef">await&lt;/span> writer.WriteAsync(protocol, request);
&lt;span style="color:#66d9ef">var&lt;/span> result = &lt;span style="color:#66d9ef">await&lt;/span> reader.ReadAsync(protocol);
reader.Advance();
&lt;span style="color:#66d9ef">return&lt;/span> result.Message;
}
&lt;span style="color:#75715e">/// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>No método &lt;code>ConnectAsync&lt;/code> fazemos a conexão com os hosts, podemos ver aqui o uso do &lt;code>ClientBuilder&lt;/code> fornecido pelo &lt;em>Bedrock Framework&lt;/em>, o &lt;em>framework&lt;/em> faz uso de uma &amp;ldquo;API fluente&amp;rdquo; para encadear métodos que configuram parâmetros ou comportamentos do &lt;em>framework&lt;/em>. Nesse caso queremos nos conectar via TCP ao host, por isso o uso do método &lt;code>UseSockets&lt;/code>, adicionalmente &lt;code>UseConnectionLogging&lt;/code> gerará logs da comunicação, ao final o método &lt;code>Build&lt;/code> vai retornar um cliente que contém em si uma instância de &lt;code>IConnectionFactory&lt;/code>, mais especificamente do tipo &lt;code>SocketConnectionFactory&lt;/code> definido pelo método &lt;code>UseSockets&lt;/code>, o qual abrirá uma conexão com o host e nos devolverá uma conexão pronta para comunicação. A conexão retornada pelo método &lt;code>ConnectAsync&lt;/code> do &lt;em>client&lt;/em> é um &lt;code>ConnectionContext&lt;/code> definido em &lt;code>Microsoft.AspNetCore.Connections.Abstractions&lt;/code>, o &lt;em>framework&lt;/em> implementa &amp;ldquo;uma ligação&amp;rdquo; para a escrita/leitura utilizando &lt;code>System.IO.Pipelines.Pipe&lt;/code> para otimizar a alocação de memória e performance.&lt;/p>
&lt;p>O método &lt;code>GetApiVersions&lt;/code> trata das chamadas para realizar a escrita dos dados para a conexão e análise da resposta - sem complexidades aqui.&lt;/p>
&lt;p>A classe &lt;code>ApiVersions&lt;/code> é quem contém a lógica para escrita e leitura para da requisição e resposta, ou seja, a ordem em que devem ser escritos/lidos os bytes.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ApiVersions&lt;/span> :
IMessageReader&amp;lt;ApiVersionsResponse&amp;gt;,
IMessageWriter&amp;lt;ApiVersionsRequest&amp;gt;
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> TryParseMessage(&lt;span style="color:#66d9ef">in&lt;/span> ReadOnlySequence&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt; input, &lt;span style="color:#66d9ef">ref&lt;/span> SequencePosition consumed, &lt;span style="color:#66d9ef">ref&lt;/span> SequencePosition examined, &lt;span style="color:#66d9ef">out&lt;/span> ApiVersionsResponse message)
{
&lt;span style="color:#66d9ef">var&lt;/span> reader = &lt;span style="color:#66d9ef">new&lt;/span> SequenceReader&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt;(input);
&lt;span style="color:#66d9ef">if&lt;/span> (!reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> length)
|| input.Length &amp;lt; length)
{
message = &lt;span style="color:#66d9ef">default&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
}
reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> correlationId);
&lt;span style="color:#66d9ef">if&lt;/span> (!reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> errorCode)
|| errorCode != &lt;span style="color:#ae81ff">0&lt;/span>)
{
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">$&amp;#34;Error Core: {errorCode}&amp;#34;&lt;/span>);
}
ApiKeys[] apiKeys = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> apiKeysLength))
{
apiKeys = &lt;span style="color:#66d9ef">new&lt;/span> ApiKeys[apiKeysLength];
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; apiKeysLength; i++)
{
reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> apiKey);
reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> minVersion);
reader.TryReadBigEndian(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> maxVersion);
apiKeys[i] = &lt;span style="color:#66d9ef">new&lt;/span> ApiKeys(apiKey, minVersion, maxVersion);
}
}
message = &lt;span style="color:#66d9ef">new&lt;/span> ApiVersionsResponse(errorCode, apiKeys);
consumed = reader.Position;
examined = consumed;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> WriteMessage(ApiVersionsRequest message, IBufferWriter&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt; output)
{
&lt;span style="color:#66d9ef">var&lt;/span> cltIdBytes = Encoding.UTF8.GetBytes(message.ClientId);
&lt;span style="color:#66d9ef">var&lt;/span> size = &lt;span style="color:#ae81ff">14&lt;/span> + cltIdBytes.Length;
&lt;span style="color:#75715e">// Size
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> sizeBuffer = output.GetSpan(&lt;span style="color:#ae81ff">4&lt;/span>);
BinaryPrimitives.WriteInt32BigEndian(sizeBuffer, size);
output.Advance(&lt;span style="color:#ae81ff">4&lt;/span>);
&lt;span style="color:#75715e">// Header - RequestApiKey
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> rakBuffer = output.GetSpan(&lt;span style="color:#ae81ff">2&lt;/span>);
BinaryPrimitives.WriteInt16BigEndian(rakBuffer, message.RequestApiKey);
output.Advance(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;span style="color:#75715e">// Header - RequestApiVersion
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> ravBuffer = output.GetSpan(&lt;span style="color:#ae81ff">2&lt;/span>);
BinaryPrimitives.WriteInt16BigEndian(ravBuffer, message.RequestApiVersion);
output.Advance(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;span style="color:#75715e">// Header - CorrelationId
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> crIdBuffer = output.GetSpan(&lt;span style="color:#ae81ff">4&lt;/span>);
BinaryPrimitives.WriteInt32BigEndian(crIdBuffer, message.CorrelationId);
output.Advance(&lt;span style="color:#ae81ff">4&lt;/span>);
&lt;span style="color:#75715e">// Headers - ClientId
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> cltIdNBuffer = output.GetSpan(&lt;span style="color:#ae81ff">2&lt;/span>);
BinaryPrimitives.WriteInt16BigEndian(cltIdNBuffer, (&lt;span style="color:#66d9ef">short&lt;/span>)cltIdBytes.Length);
output.Advance(&lt;span style="color:#ae81ff">2&lt;/span>);
output.Write(cltIdBytes);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Com isso feito, é possível criar uma pequena aplicação console para por tudo a funcionar 🤞. Para testar, iniciei uma instância do Kafka usando &lt;em>Docker&lt;/em> a ouvir a porta padrão 9092.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
{
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main(&lt;span style="color:#66d9ef">string&lt;/span>[] args)
{
&lt;span style="color:#66d9ef">var&lt;/span> provider = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection()
.AddLogging(builder =&amp;gt;
builder
.SetMinimumLevel(LogLevel.Debug)
.AddConsole(opts =&amp;gt; opts.DisableColors = &lt;span style="color:#66d9ef">false&lt;/span>))
.AddKafkaRawClient(&lt;span style="color:#e6db74">&amp;#34;localhost:9092&amp;#34;&lt;/span>)
.BuildServiceProvider();
&lt;span style="color:#66d9ef">await&lt;/span> provider.GetService&amp;lt;IKafkaRawClient&amp;gt;().ConnectAsync();
&lt;span style="color:#66d9ef">var&lt;/span> r = &lt;span style="color:#66d9ef">await&lt;/span> provider.GetService&amp;lt;IKafkaRawClient&amp;gt;().GetApiVersions();
&lt;span style="color:#66d9ef">string&lt;/span> apis = JsonSerializer.Serialize(r, &lt;span style="color:#66d9ef">new&lt;/span> JsonSerializerOptions { WriteIndented = &lt;span style="color:#66d9ef">true&lt;/span> });
provider.GetService&amp;lt;ILogger&amp;lt;Program&amp;gt;&amp;gt;().LogDebug(&lt;span style="color:#e6db74">$&amp;#34;ApiVersions: {apis}&amp;#34;&lt;/span>);
Console.ReadKey();
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Abaixo temos a saída da execução da aplicação console:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">info: KafkaRaw.KafkaRawClient&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>
Connected to &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:8662
info: KafkaRaw.KafkaRawClient&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>
Starting Kafka client.
dbug: Bedrock.Framework.LoggingConnectionMiddleware&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>
WriteAsync&lt;span style="color:#f92672">[&lt;/span>26&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0C 6B &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">66&lt;/span> 6B &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">77&lt;/span> 2F &lt;span style="color:#ae81ff">30&lt;/span> 2E &lt;span style="color:#ae81ff">31&lt;/span>
&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>16&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>12&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0Ckafkaraw/0.1
dbug: Bedrock.Framework.LoggingConnectionMiddleware&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>
ReadAsync&lt;span style="color:#f92672">[&lt;/span>302&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> 2A &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0B &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">05&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">09&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">05&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">06&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">06&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">07&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">09&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">06&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0A &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0B &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">06&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0C &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0D &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0E &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 0F &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">05&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">05&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1A &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1B &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1C &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1D &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1E &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 1F &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">26&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">27&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">29&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2A &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2B &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2C &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2D &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2E &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> 2F &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01*&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>000&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>08&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0B&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>02&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>05&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>09&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>05&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>02&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>06&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>06&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>07&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>08&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>08&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>09&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>06&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0A&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0B&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>06&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0C&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0D&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0E&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>0F&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>05&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>10&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>11&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>12&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>13&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>05&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>14&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>04&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>15&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>16&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>02&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>17&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>03&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>18&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>19&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1A&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1B&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1C&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>02&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1D&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1E&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>1F&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>02&lt;span style="color:#ae81ff">\x&lt;/span>00!&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#ae81ff">\x&lt;/span>01&lt;span style="color:#ae81ff">\x&lt;/span>00&lt;span style="color:#e6db74">&amp;#34;\x00\x00\x00\x01\x00#\x00\x00\x00\x01\x00&lt;/span>$&lt;span style="color:#e6db74">\x00\x00\x00\x01\x00%\x00\x00\x00\x01\x00&amp;amp;\x00\x00\x00\x02\x00&amp;#39;\x00\x00\x00\x01\x00(\x00\x00\x00\x01\x00)\x00\x00\x00\x01\x00*\x00\x00\x00\x02\x00+\x00\x00\x00\x02\x00,\x00\x00\x00\x01\x00-\x00\x00\x00\x00\x00.\x00\x00\x00\x00\x00/\x00\x00\x00\x00
&lt;/span>&lt;span style="color:#e6db74">dbug: KafkaClient.Program[0]
&lt;/span>&lt;span style="color:#e6db74"> ApiVersions: {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ErrorCode&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ApiKeys&lt;span style="color:#e6db74">&amp;#34;: [
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ApiKey&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MinVersion&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MaxVersion&lt;span style="color:#e6db74">&amp;#34;: 8
&lt;/span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ApiKey&lt;span style="color:#e6db74">&amp;#34;: 1,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MinVersion&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MaxVersion&lt;span style="color:#e6db74">&amp;#34;: 11
&lt;/span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ApiKey&lt;span style="color:#e6db74">&amp;#34;: 2,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MinVersion&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MaxVersion&lt;span style="color:#e6db74">&amp;#34;: 5
&lt;/span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>ApiKey&lt;span style="color:#e6db74">&amp;#34;: 3,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MinVersion&lt;span style="color:#e6db74">&amp;#34;: 0,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>MaxVersion&lt;span style="color:#e6db74">&amp;#34;: 9
&lt;/span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;span style="color:#e6db74"> ...
&lt;/span>&lt;span style="color:#e6db74"> ]
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>E funciona!!! 😁😁😁 o método da API do Kafka chamado retorna qual a versão mínima e máxima aceita pelo &lt;em>broker&lt;/em>.&lt;/p>
&lt;h2 id="conclusão">Conclusão&lt;/h2>
&lt;p>A protocolo de comunicação com o Kafka é bem documentado e será fácil seguir implementando novos métodos, o próximo desafio será organizar o fluxo de comunicação: &lt;em>healthchecks&lt;/em>, cache dos metadados do &lt;em>cluster&lt;/em>, e definir quais recursos o &lt;a href="https://github.com/pvoliveira/kafkaraw">KafkaRaw&lt;/a> irá expor.&lt;/p>
&lt;p>Tentei ser mais direto possível para mostrar como você pode implementar um protocolo customizado de comunicação com .NET Core, por isso não tentei deixar as coisas no &amp;ldquo;melhor estado da arte&amp;rdquo;, e muito menos tocar em performance, gerenciamento de memória e etc, mas espero após alguns posts chegar a isso. Para qualquer dúvida ou discussão, o projeto já está no &lt;em>GitHub&lt;/em>, pode se abrir uma &lt;em>issue&lt;/em>, deixar um comentário aqui no post ou falar diretamente comigo.&lt;/p>
&lt;p>Muito obrigado e até o próximo 😎&lt;/p></description></item><item><title>Primeiro Passo</title><link>https://blog.pauloliveira.dev/post/2020-07-31-primeiro-passo/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.pauloliveira.dev/post/2020-07-31-primeiro-passo/</guid><description>&lt;p>Olá, esse texto marca o início de um algo importante para mim e que sempre tive vontade fazer, mas por não ser bom com palavras e acho que um pouco inseguro também, preferi sempre adiar.&lt;/p>
&lt;p>Sou desenvolvedor de software já a algum tempo, sempre trabalhei com tecnologias &lt;em>Microsoft&lt;/em>, inicialmente VB6 e depois .NET. Sempre gostei de entender o como as coisas funcionavam e experimentar novas: &lt;a href="https//www.python.org">&lt;em>Python&lt;/em>&lt;/a> (por causa do &lt;a href="https://www.djangoproject.com">&lt;em>Django&lt;/em>&lt;/a>), &lt;em>JavaScript&lt;/em> (por causa do trabalho e por causa do &lt;a href="https://nodejs.org">&lt;em>NodeJS&lt;/em>&lt;/a>), &lt;a href="https://golang.org">&lt;em>Golang&lt;/em> (ou comulmente chamada de &lt;em>Go&lt;/em>)&lt;/a> (ainda quero trabalhar só com isso) e mais recentemente, e apenas por curiosidade, &lt;a href="https://www.rust-lang.org">&lt;em>Rust&lt;/em>&lt;/a>.&lt;/p>
&lt;p>Nos últimos quase 2 anos tenho trabalhado na &lt;a href="https://aboutfarfetch.com/">Farfetch&lt;/a>, e tem me trazido novos desafios e a vontade de me aprofundar mais nas tecnologias que trabalho, principalmente &lt;em>C#/.NET&lt;/em> que é o que faço a maior parte do tempo, então basicamente o conteúdo que quero postar vai ter muito a ver com isso, e com &lt;em>Go&lt;/em> também porque me ganhou desde a primeira vez que fiz algum código, mas depois vou contar como foi essa cena com &lt;em>Go&lt;/em>. 😅😅😅&lt;/p>
&lt;p>Esse &amp;ldquo;blog&amp;rdquo; vai ser um pouco do que tenho descoberto em &lt;em>C#/.NET&lt;/em> e &lt;em>Go&lt;/em>, foi daí minha ideia de que esses posts fossem um pouco do que penso, minhas investigações para resolver problemas, pequenas dicas que encontro (que todos podem saber mas vou deixar aqui pra consultas futuras 🤣) e etc, pretendo que tudo seja em português a princípio, existem certos problemas que são difíceis de se achar conteúdo em português então se puder ajudar um pouco nesse sentido já estarei feliz. A algum tempo já temos ótimos blogs que trazem ótimo conteúdo sobre desenvolvimento de software, por isso penso em ser simples e focar numa abordagem exploratória, tenho um problema e como posso resolver ~ou não~.&lt;/p>
&lt;p>Quero deixar aqui um agradecimento do coração para uma amiga &lt;a href="https://twitter.com/oliviamattiazzo">@oliviamattiazzo&lt;/a> que vendo o trabalho dela, me inspirou também a iniciar, e também deixo aqui o link para o blog dela &lt;a href="http://oliviamattiazzo.com.br/">http://oliviamattiazzo.com.br/&lt;/a>.&lt;/p>
&lt;p>Para semana já teremos algo novo por aqui! 😁&lt;/p></description></item></channel></rss>