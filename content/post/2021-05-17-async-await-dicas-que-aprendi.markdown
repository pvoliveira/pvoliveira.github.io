---
comments: true
title: "Async/Await - Pequenas dicas ;)"
date: 2021-05-20T00:59:51+01:00
categories: [.net,async-await,dotnet,dotnet-core,performance,optimization]
---

Ol√° novamente, sei que passou muito tempo at√© chegarmos nesse novo post, tive contra-tempos, falta de vontade de continuar, e comecei a fazer algo que n√£o fazia que era guardar em algum lugar o que aprendi para partilhar aqui. Enfim, vamos a isso ü§ì

Estive a fazer um curso sobre c√≥digo ass√≠ncrono em .NET/C# [Async Experts](https://asyncexpert.com), e acho que tem conte√∫do suficiente para render alguns posts, ent√£o comecei a fazer uma lista para partilhar aqui, agora vou deixar uma dica que voc√™ pode j√° saber ou talvez nunca tenha notado.

## Exceptions

Observe o exemplo abaixo por um minuto e tente identificar se existe algo "mal":

```csharp
public async Task<bool> Method_A_Async(string value)
{
    if (string.IsNullOrEmpty(value))
    {
        throw new ArgumentException();
    }

    var response = await httpClient.GetAsync(value);
    
    return response != null;
}

public async Task A_MethodA_Async()
{
    var x = await Method_A_Async("x");
}

public async Task B_MethodA_Async()
{
    var x = await Method_A_Async("");
}
```

O c√≥digo n√£o tem nenhum problema, o m√©todo `A_MethodA_Async` ir√° ser executado sem gerar exce√ß√µes, enquanto o m√©todo `B_MethodA_Async` lan√ßar√° uma exce√ß√£o do tipo `ArgumentException`. Voc√™ pode j√° ter escrito m√©todos dessa forma e v√£o funcionar, mas se pensarmos em como m√©todos ass√≠ncronos s√£o executados estamos a utilizar um pouco mal os recursos quando o m√©todo `B_MethodA_Async` √© executado.

Quando fazemos `await` para computar o valor de uma `Task` estamos a escalar a execu√ß√£o da `Task` para o `ThreadPool`, pois bem, no exemplo acima existem dois caminhos para nosso c√≥digo executar: primeiro quando passar um valor que √© vazio ou nulo, o segundo √© quando passamos um valor v√°lido e temos uma nova chama ass√≠ncrona. Isso significa que podemos (ou n√£o) estar a utilizar mais de uma thread para processar c√≥digo que poderia ser s√≠ncrono, vamos reescrever o c√≥digo do m√©todo `Method_A_Async`.

```csharp
public Task<bool> Method_B_Async(string value)
{
    if (string.IsNullOrEmpty(value))
    {
        throw new ArgumentException();
    }

    return Method_B_InternalAsync(value);
}

private async Task<bool> Method_B_InternalAsync(string value)
{
    var response = await httpClient.GetAsync(value);
    
    return response != null;
}
```

Primeiro notem que removi o `async` da assinatura do m√©todo, n√£o estamos mais a utilizar o `await` para nenhuma chamada, ent√£o isso torna `Method_B_Async` um m√©todo s√≠ncrono. Tamb√©m criei um novo m√©todo `Method_B_InternalAsync` (usando `async` na assinatura) que n√£o tem mais as valida√ß√µes necess√°rias para os par√¢metros (feitas no m√©todo `Method_B_Async`), isso √© chamado de "async eliding" e a tradu√ß√£o pode ficar um pouco estranha mas √© algo como *"suprimir/omitir o ass√≠ncrono"*.

Abaixo podemos ver melhor o que significa adicionar o `async` na assinatura do m√©todo:

```csharp
[AsyncStateMachine(typeof(<Method_A_Async>d__1))]
[DebuggerStepThrough]
public Task<bool> Method_A_Async(string value)
{
    <Method_A_Async>d__1 stateMachine = new <Method_A_Async>d__1();
    stateMachine.<>t__builder = AsyncTaskMethodBuilder<bool>.Create();
    stateMachine.<>4__this = this;
    stateMachine.value = value;
    stateMachine.<>1__state = -1;
    stateMachine.<>t__builder.Start(ref stateMachine);
    return stateMachine.<>t__builder.Task;
}
```

E sem `async`:

```csharp
public Task<bool> Method_B_Async(string value)
{
    if (string.IsNullOrEmpty(value))
    {
        throw new ArgumentException();
    }
    return Method_B_InternalAsync(value);
}

[AsyncStateMachine(typeof(<Method_B_InternalAsync>d__2))]
[DebuggerStepThrough]
private Task<bool> Method_B_InternalAsync(string value)
{
    <Method_B_InternalAsync>d__2 stateMachine = new <Method_B_InternalAsync>d__2();
    stateMachine.<>t__builder = AsyncTaskMethodBuilder<bool>.Create();
    stateMachine.<>4__this = this;
    stateMachine.value = value;
    stateMachine.<>1__state = -1;
    stateMachine.<>t__builder.Start(ref stateMachine);
    return stateMachine.<>t__builder.Task;
}
```

Um m√°quina de estados √© criada para a execu√ß√£o do m√©todo ass√≠ncrono e a valida√ß√£o dos par√¢metros ser√° feito dentro dessa m√°quina de estados. Enquanto se utilizarmos a outra abordagem, conseguimos manter as valida√ß√µes que n√£o dependem de m√©todos ass√≠ncronos fora do fluxo ass√≠ncrono de execu√ß√£o.

Pode parecer um detalhe mas evitar a m√°quina de estados (no nosso exemplo quando vamos parar a execu√ß√£o do m√©todo por causa de uma valida√ß√£o/exce√ß√£o) al√©m de poder melhorar o uso de mais threads na execu√ß√£o tamb√©m evita a aloca√ß√£o de objetos para gerir o c√≥digo ass√≠ncrono. S√£o otimiza√ß√µes que em *hot-paths* (trechos muito executados na aplica√ß√£o) podem gerar ganhos positivos e performance üòâ.
