---
title: "Async/Await - Pequenas dicas ;)"
date: 2021-05-16T19:28:51+01:00
draft: true
---

Ol√° novamente, sei que passou muito tempo at√© chegarmos nesse novo post, tive contra-tempos, falta de vontade de continuar, e comecei a fazer algo que n√£o fazia que era guardar em algum lugar o que aprendi para partilhar aqui. Enfim, vamos a isso ü§ì


Estive a fazer um curso sobre c√≥digo ass√≠ncrono em .NET/C# [Async Experts](https://asyncexpert.com), e estava cheio de coisas para render v√°rios posts, ent√£o comecei a fazer uma lista para partilhar aqui, agora vou deixar uma dica que voc√™ pode j√° saber sobre isso ou talvez nunca tenha notado.

## Exceptions

Primeira dica √© sobre como lidar com exce√ß√µes no c√≥digo ass√≠ncrono, para ajudar observe o exemplo abaixo por um minuto e tente identificar se existe algo "mal":

```csharp
public async Task<bool> Method_A_Async(string value)
{
    if (string.IsNullOrEmpty(value))
    {
        throw new ArgumentException();
    }

    var response = await httpClient.GetAsync(value);
    
    return response != null;
}

public async Task A_MethodA_Async()
{
    var x = await Method_A_Async("x");
}

public async Task B_MethodA_Async()
{
    var x = await Method_A_Async("");
}
```

O c√≥digo n√£o tem nenhum problema, o m√©todo `A_MethodA_Async` ir√° ser executado sem gerar exce√ß√µes, enquanto o m√©todo `B_MethodA_Async` lan√ßar√° uma exce√ß√£o do tipo `ArgumentException`. Voc√™ pode j√° ter escrito m√©todos dessa forma e v√£o funcionar, mas se pensarmos em como m√©todos ass√≠ncronos s√£o executados estamos a utilizar um pouco mal os recursos no m√©todo `B_MethodA_Async`.

Quando fazemos `await` para computar o valor de uma `Task` estamos a escalar a execu√ß√£o da `Task` para o `ThreadPool`, pois bem, no exemplo acima existem dois caminhos para nosso c√≥digo executar: primeiro quando passar um valor que √© vazio ou nulo, o segundo √© quando passamos um valor v√°lido e temos uma nova chama ass√≠ncrona. Isso significa que podemos (ou n√£o) estar a utizar mais de uma thread para processar c√≥digo que poderia ser s√≠ncrono, vamos reescrever o c√≥digo do m√©todo `Method_A_Async`.

```csharp
public Task<bool> Method_A_Async(string value)
{
    if (string.IsNullOrEmpty(value))
    {
        throw new ArgumentException();
    }

    return Method_A_InternalAsync(value);
}

private async Task<bool> Method_A_InternalAsync(string value)
{
    var response = await httpClient.GetAsync(value);
    
    return response != null;
}
```

Primeiro notem que removi o `async` da assinatura do m√©todo, n√£o estamos mais a utilizar o `await` para nenhuma chamada, ent√£o isso torna `Method_A_Async` um m√©todo s√≠ncrono. Tamb√©m criei um novo m√©todo `Method_A_InternalAsync` (usando `async` na assinatura) que n√£o tem mais as valida√ß√µes necess√°rias para os par√¢metros (feitas no m√©todo `Method_A_Async`)